name: Build Dictionaries (Matrix)

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering
  schedule:
    - cron: "0 0 1 * *" # Run monthly

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21"

      - name: Download JMdict files
        run: |
          mkdir -p dictionaries/jmdict/source
          echo "Downloading JMdict files..."
          curl -L -o dictionaries/jmdict/source/jmdict-examples-eng-3.6.1.json https://github.com/scriptin/jmdict-simplified/releases/download/3.6.1/jmdict-examples-eng-3.6.1.json
          # Verify file was downloaded correctly
          filesize=$(stat -c%s "dictionaries/jmdict/source/jmdict-examples-eng-3.6.1.json")
          echo "JMdict file size: $filesize bytes"
          if [ "$filesize" -lt 1000000 ]; then
            echo "Error: JMdict file is too small, likely not downloaded correctly"
            head -n 20 dictionaries/jmdict/source/jmdict-examples-eng-3.6.1.json
            exit 1
          fi

      - name: Download JMnedict files
        run: |
          mkdir -p dictionaries/jmnedict/source
          echo "Downloading JMnedict files..."
          curl -L -o dictionaries/jmnedict/source/jmnedict-all-3.6.1.json https://github.com/scriptin/jmdict-simplified/releases/download/3.6.1/jmnedict-all-3.6.1.json
          # Verify file was downloaded correctly
          filesize=$(stat -c%s "dictionaries/jmnedict/source/jmnedict-all-3.6.1.json")
          echo "JMnedict file size: $filesize bytes"
          if [ "$filesize" -lt 1000000 ]; then
            echo "Error: JMnedict file is too small, likely not downloaded correctly"
            head -n 20 dictionaries/jmnedict/source/jmnedict-all-3.6.1.json
            exit 1
          fi

      - name: Download Kanjidic files
        run: |
          mkdir -p dictionaries/kanjidic/source
          echo "Downloading Kanjidic files..."
          curl -L -o dictionaries/kanjidic/source/kanjidic2-en-3.6.1.json https://github.com/scriptin/jmdict-simplified/releases/download/3.6.1/kanjidic2-en-3.6.1.json
          # Verify file was downloaded correctly
          filesize=$(stat -c%s "dictionaries/kanjidic/source/kanjidic2-en-3.6.1.json")
          echo "Kanjidic file size: $filesize bytes"
          if [ "$filesize" -lt 100000 ]; then
            echo "Error: Kanjidic file is too small, likely not downloaded correctly"
            head -n 20 dictionaries/kanjidic/source/kanjidic2-en-3.6.1.json
            exit 1
          fi

      - name: Download Chinese dictionary files
        run: |
          mkdir -p dictionaries/chinese_chars/source
          mkdir -p dictionaries/chinese_words/source

          echo "Downloading Chinese character dictionary..."
          # Download Chinese character dictionary
          curl -L -o dictionaries/chinese_chars/source/dictionary_char_2024-06-17.jsonl https://data.dong-chinese.com/dictionary_char_2024-06-17.jsonl

          # Verify file was downloaded correctly
          filesize=$(stat -c%s "dictionaries/chinese_chars/source/dictionary_char_2024-06-17.jsonl")
          echo "Chinese char dictionary file size: $filesize bytes"
          if [ "$filesize" -lt 1000000 ]; then
            echo "Error: Chinese char dictionary file is too small, likely not downloaded correctly"
            head -n 20 dictionaries/chinese_chars/source/dictionary_char_2024-06-17.jsonl
            exit 1
          fi

          echo "Downloading Chinese word dictionary..."
          # Download Chinese word dictionary
          curl -L -o dictionaries/chinese_words/source/dictionary_word_2024-06-17.jsonl https://data.dong-chinese.com/dictionary_word_2024-06-17.jsonl

          # Verify file was downloaded correctly
          filesize=$(stat -c%s "dictionaries/chinese_words/source/dictionary_word_2024-06-17.jsonl")
          echo "Chinese word dictionary file size: $filesize bytes"
          if [ "$filesize" -lt 1000000 ]; then
            echo "Error: Chinese word dictionary file is too small, likely not downloaded correctly"
            head -n 20 dictionaries/chinese_words/source/dictionary_word_2024-06-17.jsonl
            exit 1
          fi

          echo "Converting JSONL to JSON..."
          # Convert JSONL to JSON
          go run cmd/jsonl2json/main.go -input=dictionaries/chinese_chars/source/dictionary_char_2024-06-17.jsonl -output=dictionaries/chinese_chars/source/dictionary_char_2024-06-17.json
          go run cmd/jsonl2json/main.go -input=dictionaries/chinese_words/source/dictionary_word_2024-06-17.jsonl -output=dictionaries/chinese_words/source/dictionary_word_2024-06-17.json

          # Verify JSON files were created correctly
          filesize1=$(stat -c%s "dictionaries/chinese_chars/source/dictionary_char_2024-06-17.json")
          filesize2=$(stat -c%s "dictionaries/chinese_words/source/dictionary_word_2024-06-17.json")
          echo "Chinese char JSON file size: $filesize1 bytes"
          echo "Chinese word JSON file size: $filesize2 bytes"

          # Debug: Check if the files exist
          echo "Checking if Chinese dictionary files exist..."
          ls -la dictionaries/chinese_chars/source/
          ls -la dictionaries/chinese_words/source/

      - name: Cache dictionary files
        uses: actions/cache@v3
        with:
          path: |
            dictionaries/jmdict/source/
            dictionaries/jmnedict/source/
            dictionaries/kanjidic/source/
            dictionaries/chinese_chars/source/
            dictionaries/chinese_words/source/
          key: ${{ runner.os }}-dictionary-files-${{ github.sha }}

  build:
    needs: prepare
    runs-on: ubuntu-latest

    strategy:
      matrix:
        shard-type: [non-han, han-1char, han-2char, han-3plus]
      # This ensures all builds run even if one fails
      fail-fast: false

    env:
      # Set the output repo based on the matrix value
      OUTPUT_REPO: ${{ format('Kimeiga/japanese-dict-{0}', matrix.shard-type) }}

    steps:
      # Common setup steps
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21"

      # Restore cached dictionary files
      - name: Restore cached dictionary files
        uses: actions/cache@v3
        with:
          path: |
            dictionaries/jmdict/source/
            dictionaries/jmnedict/source/
            dictionaries/kanjidic/source/
            dictionaries/chinese_chars/source/
            dictionaries/chinese_words/source/
          key: ${{ runner.os }}-dictionary-files-${{ github.sha }}

      # Generate dictionary files with type-specific parameters
      - name: Verify dictionary files
        run: |
          # Debug: Check if the dictionary files exist and have proper content
          echo "Checking if dictionary files exist and have proper content..."

          # Check JMdict file
          echo "JMdict file:"
          ls -la dictionaries/jmdict/source/
          filesize=$(stat -c%s "dictionaries/jmdict/source/jmdict-examples-eng-3.6.1.json" || echo 0)
          echo "JMdict file size: $filesize bytes"
          if [ "$filesize" -lt 1000000 ]; then
            echo "Error: JMdict file is too small or missing"
            head -n 20 dictionaries/jmdict/source/jmdict-examples-eng-3.6.1.json || echo "File not found"
            exit 1
          fi

          # Check JMnedict file
          echo "JMnedict file:"
          ls -la dictionaries/jmnedict/source/
          filesize=$(stat -c%s "dictionaries/jmnedict/source/jmnedict-all-3.6.1.json" || echo 0)
          echo "JMnedict file size: $filesize bytes"
          if [ "$filesize" -lt 1000000 ]; then
            echo "Error: JMnedict file is too small or missing"
            head -n 20 dictionaries/jmnedict/source/jmnedict-all-3.6.1.json || echo "File not found"
            exit 1
          fi

          # Check Kanjidic file
          echo "Kanjidic file:"
          ls -la dictionaries/kanjidic/source/
          filesize=$(stat -c%s "dictionaries/kanjidic/source/kanjidic2-en-3.6.1.json" || echo 0)
          echo "Kanjidic file size: $filesize bytes"
          if [ "$filesize" -lt 100000 ]; then
            echo "Error: Kanjidic file is too small or missing"
            head -n 20 dictionaries/kanjidic/source/kanjidic2-en-3.6.1.json || echo "File not found"
            exit 1
          fi

          # Check Chinese dictionary files
          echo "Chinese dictionary files:"
          ls -la dictionaries/chinese_chars/source/
          ls -la dictionaries/chinese_words/source/

          filesize1=$(stat -c%s "dictionaries/chinese_chars/source/dictionary_char_2024-06-17.json" || echo 0)
          filesize2=$(stat -c%s "dictionaries/chinese_words/source/dictionary_word_2024-06-17.json" || echo 0)
          echo "Chinese char JSON file size: $filesize1 bytes"
          echo "Chinese word JSON file size: $filesize2 bytes"

          if [ "$filesize1" -lt 1000000 ]; then
            echo "Error: Chinese char dictionary file is too small or missing"
            head -n 20 dictionaries/chinese_chars/source/dictionary_char_2024-06-17.json || echo "File not found"
            exit 1
          fi

          if [ "$filesize2" -lt 1000000 ]; then
            echo "Error: Chinese word dictionary file is too small or missing"
            head -n 20 dictionaries/chinese_words/source/dictionary_word_2024-06-17.json || echo "File not found"
            exit 1
          fi

      - name: Run dictionary build
        run: |
          # Create output directory
          mkdir -p output_${{ matrix.shard-type }}

          # Run the main program with the appropriate shard type
          echo "Running the main program for ${{ matrix.shard-type }}..."
          go run cmd/kiokun/main.go --writers 4 --mode ${{ matrix.shard-type }}

          # Verify output
          echo "Generated $(find output_${{ matrix.shard-type }} -type f | wc -l) files"

      # Push to the appropriate output repository
      - name: Push to output repository
        run: |
          # Navigate to output directory
          cd output_${{ matrix.shard-type }}

          # Initialize new git repo
          rm -rf .git
          git init

          # Configure Git
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

          # Add the remote
          git remote add origin https://x-access-token:${{ secrets.DICTIONARY_DEPLOY_TOKEN }}@github.com/${{ env.OUTPUT_REPO }}.git

          # Add all files
          git add .

          # Create commit
          git commit -m "Update ${{ matrix.shard-type }} dictionary files"

          # Force push to completely replace contents
          git push -f origin master:main

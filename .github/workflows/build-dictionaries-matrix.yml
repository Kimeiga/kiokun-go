name: Build Dictionaries (Matrix)

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering
  schedule:
    - cron: "0 0 1 * *" # Run monthly

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21"

      - name: Download dictionary source files
        run: |
          # Create directories if they don't exist
          mkdir -p dictionaries/jmdict/source
          mkdir -p dictionaries/jmnedict/source

          # Download JMdict file with examples
          echo "Downloading JMdict file with examples..."
          curl -L -o dictionaries/jmdict/source/jmdict-examples-eng-3.6.1.json.zip https://github.com/scriptin/jmdict-simplified/releases/download/3.6.1+20250505122413/jmdict-examples-eng-3.6.1+20250505122413.json.zip

          # Unzip the JMdict file
          echo "Unzipping JMdict file..."
          unzip -o dictionaries/jmdict/source/jmdict-examples-eng-3.6.1.json.zip -d dictionaries/jmdict/source/

          # Download JMNedict file
          echo "Downloading JMNedict file..."
          curl -L -o dictionaries/jmnedict/source/jmnedict-all-3.6.1.json.zip https://github.com/scriptin/jmdict-simplified/releases/download/3.6.1+20250505122413/jmnedict-all-3.6.1+20250505122413.json.zip

          # Unzip the JMNedict file
          echo "Unzipping JMNedict file..."
          unzip -o dictionaries/jmnedict/source/jmnedict-all-3.6.1.json.zip -d dictionaries/jmnedict/source/

          # Verify files were downloaded
          ls -la dictionaries/jmdict/source/
          ls -la dictionaries/jmnedict/source/

          # Create Kanjidic directory if it doesn't exist
          mkdir -p dictionaries/kanjidic/source

          # Check if Kanjidic file exists
          if [ -f "dictionaries/kanjidic/source/kanjidic2-en-3.6.1.json" ]; then
            echo "Kanjidic file exists"
            ls -la dictionaries/kanjidic/source/
          else
            echo "Kanjidic file does not exist, downloading..."
            curl -L -o dictionaries/kanjidic/source/kanjidic2-en-3.6.1.json https://github.com/scriptin/jmdict-simplified/releases/download/3.6.1+20250505122413/kanjidic2-en-3.6.1+20250505122413.json
            ls -la dictionaries/kanjidic/source/
          fi

          # Download and convert Chinese character dictionary
          mkdir -p dictionaries/chinese_chars/source
          if [ -f "dictionaries/chinese_chars/source/dictionary_char_2024-06-17.json" ]; then
            echo "Chinese character dictionary file exists"
          else
            echo "Downloading Chinese character dictionary..."
            curl -L -o dictionaries/chinese_chars/source/dictionary_char_2024-06-17.jsonl https://data.dong-chinese.com/dump/dictionary_char_2024-06-17.jsonl

            echo "Converting Chinese character dictionary from JSONL to JSON..."
            go run cmd/jsonl2json/main.go -input=dictionaries/chinese_chars/source/dictionary_char_2024-06-17.jsonl -output=dictionaries/chinese_chars/source/dictionary_char_2024-06-17.json

            # Verify the file was created
            echo "Verifying Chinese character dictionary file..."
            ls -la dictionaries/chinese_chars/source/
            if [ -f "dictionaries/chinese_chars/source/dictionary_char_2024-06-17.json" ]; then
              echo "Chinese character dictionary file was created successfully"
            else
              echo "Error: Chinese character dictionary file was not created"
              exit 1
            fi
          fi

          # Download and convert Chinese word dictionary
          mkdir -p dictionaries/chinese_words/source
          if [ -f "dictionaries/chinese_words/source/dictionary_word_2024-06-17.json" ]; then
            echo "Chinese word dictionary file exists"
          else
            echo "Downloading Chinese word dictionary..."
            curl -L -o dictionaries/chinese_words/source/dictionary_word_2024-06-17.jsonl https://data.dong-chinese.com/dump/dictionary_word_2024-06-17.jsonl

            echo "Converting Chinese word dictionary from JSONL to JSON..."
            go run cmd/jsonl2json/main.go -input=dictionaries/chinese_words/source/dictionary_word_2024-06-17.jsonl -output=dictionaries/chinese_words/source/dictionary_word_2024-06-17.json

            # Verify the file was created
            echo "Verifying Chinese word dictionary file..."
            ls -la dictionaries/chinese_words/source/
            if [ -f "dictionaries/chinese_words/source/dictionary_word_2024-06-17.json" ]; then
              echo "Chinese word dictionary file was created successfully"
            else
              echo "Error: Chinese word dictionary file was not created"
              exit 1
            fi
          fi

      - name: Cache dictionary files
        uses: actions/cache@v3
        with:
          path: |
            dictionaries/jmdict/source/
            dictionaries/jmnedict/source/
            dictionaries/kanjidic/source/
            dictionaries/chinese_chars/source/
            dictionaries/chinese_words/source/
          key: ${{ runner.os }}-dictionary-files-${{ github.sha }}

  build:
    needs: prepare
    runs-on: ubuntu-latest

    strategy:
      matrix:
        shard-type: [non-han, han-1char, han-2char, han-3plus]
      # This ensures all builds run even if one fails
      fail-fast: false

    env:
      # Set the output repo based on the matrix value
      OUTPUT_REPO: ${{ format('Kimeiga/japanese-dict-{0}', matrix.shard-type) }}

    steps:
      # Common setup steps
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21"

      # Restore cached dictionary files
      - name: Restore cached dictionary files
        uses: actions/cache@v3
        with:
          path: |
            dictionaries/jmdict/source/
            dictionaries/jmnedict/source/
            dictionaries/kanjidic/source/
            dictionaries/chinese_chars/source/
            dictionaries/chinese_words/source/
          key: ${{ runner.os }}-dictionary-files-${{ github.sha }}

      # Generate dictionary files with type-specific parameters
      - name: Verify dictionary files
        run: |
          # Debug: Check if the dictionary files exist and have proper content
          echo "Checking if dictionary files exist and have proper content..."

          # Check JMdict files
          echo "JMdict files:"
          ls -la dictionaries/jmdict/source/

          # Check JMnedict files
          echo "JMnedict files:"
          ls -la dictionaries/jmnedict/source/

          # Check Kanjidic files
          echo "Kanjidic files:"
          ls -la dictionaries/kanjidic/source/

          # Check Chinese dictionary files
          echo "Chinese dictionary files:"
          ls -la dictionaries/chinese_chars/source/
          ls -la dictionaries/chinese_words/source/

      - name: Run dictionary build
        run: |
          # Create output directory
          mkdir -p output_${{ matrix.shard-type }}

          # Run the main program with the appropriate shard type
          echo "Running the main program for ${{ matrix.shard-type }}..."
          go run cmd/kiokun/main.go --writers 4 --mode ${{ matrix.shard-type }}

          # Debug: Print the output directory structure from the code
          echo "Output directory structure from the code:"
          grep -r "output_" cmd/kiokun/internal/config.go

          # List all output directories to see where files were generated
          echo "Listing all output directories after build:"
          find . -type d -name "output*" | sort

          # Count files in all output directories
          for dir in $(find . -type d -name "output*"); do
            count=$(find "$dir" -type f | wc -l)
            echo "Directory $dir contains $count files"
          done

      # Push to the appropriate output repository
      - name: Push to output repository
        run: |
          # Debug: List all output directories
          echo "Listing all output directories:"
          find . -type d -name "output*" | sort

          # Find the correct output directory
          echo "Finding the correct output directory for ${{ matrix.shard-type }}..."

          # Try different possible directory patterns based on the updated naming convention
          # Map matrix shard-type to the actual output directory name
          if [ "${{ matrix.shard-type }}" == "han-1char" ]; then
            output_dir="output_han_1char"
          elif [ "${{ matrix.shard-type }}" == "han-2char" ]; then
            output_dir="output_han_2char"
          elif [ "${{ matrix.shard-type }}" == "han-3plus" ]; then
            output_dir="output_han_3plus"
          elif [ "${{ matrix.shard-type }}" == "non-han" ]; then
            output_dir="output_non_han"
          else
            output_dir="output_${{ matrix.shard-type }}"
          fi

          echo "Expected output directory for ${{ matrix.shard-type }}: $output_dir"

          # Check if the expected directory exists and has files
          if [ -d "$output_dir" ]; then
            file_count=$(find "$output_dir" -type f | wc -l)
            echo "Found directory $output_dir with $file_count files"
          else
            echo "Expected directory $output_dir does not exist"
          fi

          # Fallback to searching all output directories
          possible_dirs=(
            "$output_dir"
            "output_${{ matrix.shard-type }}"
            "output_han_1char"
            "output_han_2char"
            "output_han_3plus"
            "output_non_han"
          )

          found_dir=""
          for dir in "${possible_dirs[@]}"; do
            if [ -d "$dir" ]; then
              # Check if directory has files
              file_count=$(find "$dir" -type f | wc -l)
              if [ "$file_count" -gt 0 ]; then
                found_dir="$dir"
                echo "Found directory with files: $found_dir"
                break
              fi
            fi
          done

          # Use the found directory if we found one
          if [ -n "$found_dir" ]; then
            output_dir="$found_dir"
          fi

          # If no directory found, try a more exhaustive search
          if [ -z "$found_dir" ]; then
            echo "No directory found with standard naming. Searching all output directories..."
            for dir in $(find . -type d -name "output*"); do
              file_count=$(find "$dir" -type f | wc -l)
              if [ "$file_count" -gt 0 ]; then
                found_dir="$dir"
                output_dir="$found_dir"
                echo "Found directory with files: $output_dir"
                break
              fi
            done
          fi

          # Exit if no directory with files found
          if [ -z "$output_dir" ]; then
            echo "No output directory with files found. Skipping repository push."
            exit 1
          fi

          # Navigate to output directory
          echo "Navigating to output directory: $output_dir"
          cd "$output_dir"

          # Debug: List files in output directory
          echo "Files in output directory:"
          ls -la

          # Count files
          file_count=$(find . -type f | wc -l)
          echo "Found $file_count files to commit"

          # Exit if no files found
          if [ "$file_count" -eq 0 ]; then
            echo "No files found in output directory. Skipping repository push."
            exit 1
          fi

          # Initialize new git repo
          rm -rf .git
          git init

          # Configure Git
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

          # Add the remote
          git remote add origin https://x-access-token:${{ secrets.DICTIONARY_DEPLOY_TOKEN }}@github.com/${{ env.OUTPUT_REPO }}.git

          # Add all files
          git add .

          # Create commit
          git commit -m "Update ${{ matrix.shard-type }} dictionary files"

          # Force push to completely replace contents
          git push -f origin master:main
